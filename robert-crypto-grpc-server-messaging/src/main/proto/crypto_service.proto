
// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "fr.gouv.stopc.robert.crypto.grpc.server.messaging";
option java_outer_classname = "CryptoGrpcService";
option objc_class_prefix = "";

package robert.server.crypto;

// The greeting service definition.
service CryptoGrpcServiceImpl {
	rpc createRegistration(CreateRegistrationRequest) returns (CreateRegistrationResponse){}
	rpc getIdFromAuth(GetIdFromAuthRequest) returns (GetIdFromAuthResponse){}
	rpc getIdFromStatus(GetIdFromStatusRequest) returns (GetIdFromStatusResponse){}
	rpc getInfoFromHelloMessage(GetInfoFromHelloMessageRequest) returns (GetInfoFromHelloMessageResponse){}
	rpc deleteId(DeleteIdRequest) returns (DeleteIdResponse){}

	//---- OLD
	rpc generateEBID(GenerateEBIDRequest) returns (EBIDResponse){}
	rpc decryptEBID(DecryptEBIDRequest) returns (EBIDResponse){}
	rpc encryptCountryCode(EncryptCountryCodeRequest) returns (EncryptCountryCodeResponse){}
	rpc decryptCountryCode(DecryptCountryCodeRequest) returns (DecryptCountryCodeResponse){}
	rpc generateMacHello(MacHelloGenerationRequest) returns (MacHelloGenerationResponse){}
	rpc validateMacHello(MacHelloValidationRequest) returns (MacValidationResponse){}
	rpc validateMacEsr(MacEsrValidationRequest) returns (MacValidationResponse){}
	rpc validateMacForType(MacValidationForTypeRequest) returns (MacValidationResponse){}
	rpc generateIdentity(GenerateIdentityRequest) returns (GenerateIdentityResponse){}
	rpc generateEncryptedEphemeralTuple(EncryptedEphemeralTupleBundleRequest) returns (EncryptedEphemeralTupleBundleResponse){}
}

message CreateRegistrationRequest {
	bytes clientPublicKey = 1;
	int32 numberOfEpochBundles = 2; // the number of epoch for which ephemeral bundles must be generated
	bytes serverCountryCode = 3; // the country code configured on the server to be used when generating ECCs
}

message CreateRegistrationResponse {
	bytes idA = 1;
	bytes tuples = 2;
}

message EpochBundle {
	int32 epochId = 1;
	bytes ebid = 2;
	bytes ecc = 3;
}

message GetIdFromAuthRequest {
	bytes ebid = 1;
	int32 epochId = 2;
	int64 time = 3;
	bytes mac = 4;
	int32 requestType = 5;
}

message GetIdFromAuthResponse {
	bytes idA = 1;
	int32 epochId = 2;
}

message GetIdFromStatusRequest {
	bytes ebid = 1;
	int32 epochId = 2;
	int64 time = 3;
	bytes mac = 4;
}

message GetIdFromStatusResponse {
	bytes idA = 1;
	int32 epochId = 2;
	bytes tuples = 3;
}

message GetInfoFromHelloMessageRequest {
	bytes hello = 1;
	int32 time = 2; // time hello message was received on device (32 bits)
	bytes serverCountryCode = 3; // the country code configured on the server, verified against decrypted ecc from hello
}

message GetInfoFromHelloMessageResponse {
	bool countryCodeMatches = 1; // true if the country code in hello matches the one provided in request
	bytes idA = 2;
	int32 epochId = 3;
	int32 time = 4; // time contained in hello message (16 bits)
}

message DeleteIdRequest {
	bytes ebid = 1;
	int32 epochId = 2;
	int64 time = 3;
	bytes mac = 4;
}

message DeleteIdResponse {
	bytes idA = 2;
}


//---- OLD MESSAGES

message GenerateEBIDRequest {
	// byte[] IDA of Registration
	// int currentEpochID
	bytes idA = 1;
	int32 epochId = 2;
}

message EBIDResponse {
	bytes ebid = 1;
}

message DecryptEBIDRequest {
	bytes ebid = 1;
}

message EncryptCountryCodeRequest {
	//  byte[] ebid;
	// byte countryCode;
	bytes ebid = 1;
	bytes countryCode = 2;
}

message EncryptCountryCodeResponse {

	// byte[] encryptedCountryCode;
	bytes encryptedCountryCode = 1;
}

message DecryptCountryCodeRequest {
	//  byte[] ebid;
	// byte encryptedCountryCode;
	bytes ebid = 1;
	bytes encryptedCountryCode = 2;
}

message DecryptCountryCodeResponse {

	// byte[] countryCode;
	bytes countryCode = 1;
}

message MacHelloGenerationRequest {
	// byte[] KA;
	// byte[] helloMessage;
	bytes ka = 1;
	bytes helloMessage = 2;
}

message MacHelloGenerationResponse {

	// byte[] macHelloMessage;
	bytes macHelloMessage = 1;
}

message MacHelloValidationRequest {
	// byte[] KA;
	// byte[] dataToValidate;
	bytes ka = 1;
	bytes dataToValidate = 2;
}
message MacValidationResponse {

	// boolean isValid;
	bool isValid = 1;
}

message MacEsrValidationRequest {
	// byte[] KA;
	// byte[] dataToValidate;
	// byte[] macToMatchWith;
	bytes ka = 1;
	bytes dataToValidate = 2;
	bytes macToMatchWith = 3;
}

message MacValidationForTypeRequest {
	// byte[] KA;
	// byte[] dataToValidate;
	// byte[] macToMatchWith;
	// byte prefixes;
	bytes ka = 1;
	bytes dataToValidate = 2;
	bytes macToMatchWith = 3;
	bytes prefixe = 4;
}

message GenerateIdentityRequest {
	bytes clientPublicKey = 1;

}

message GenerateIdentityResponse {

	bytes idA = 1;
	bytes encryptedSharedKey = 2;
	bytes serverPublicKeyForKey = 3;
}

message EncryptedEphemeralTupleBundleRequest {
	// byte[] IDA of Registration
	// int currentEpochID
	// int numberOfEpochsToGenerate
	// byte countryCode;
	// byte clientPublicKey
	bytes idA = 1;
	int32 fromEpoch = 2;
	int32 numberOfEpochsToGenerate = 3;
	bytes countryCode = 4;
	bytes clientPublicKey = 5;
	
}

 message EncryptedEphemeralTupleBundleResponse {
	// byte [] encryptedTuples;
	// byte serverPublicKeyForTuple
	bytes encryptedTuples = 1;
	bytes serverPublicKeyForTuples = 3;
}
